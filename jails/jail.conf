# Here we set a small wildcard string that makes it easy for the service
# run each jail - it translates to the root path where the $name jail
# resides
path = "/usr/jails/$name";

# This forces the jail to clear all socks and temp files at each start
exec.clean;

# This executes a preset command in the host machine, to set environment
# for the jail to run properly. In this case, we're mount the devices
# filesystem in the /dev path inside the jail (note that some services
# need specific devices to run)
exec.prestart = "/sbin/mount -t devfs -o ruleset=4 devfs $path/dev";

# This is the same as above, that was put in here as an example of
# how to run more than one command on prestart (notice the plus)
#exec.prestart += "/sbin/mount -t tmpfs -o ruleset=4 devfs $path/tmpfs";

# This sets the path relative to the jail "/", and enables the jail
# to really start up any process
exec.start = "/bin/sh /etc/rc";

# This sets the path relative to the jail "/", and enables the jail
# to stop it's running processes
exec.stop = "/bin/sh /etc/rc.shutdown";

# This one basically runs after the jail shutdown. In this case, 
# it unmounts the jail interna /dev filesystem which was mounted during
# the prestart
exec.poststop = "/sbin/umount $path/dev";

# Same as at prestart, to run more than one command on poststop
#exec.poststop += "/sbin/umount $path/dev";

# 
exec.system_user = "root";


exec.jail_user = "root";


allow.set_hostname = 0;


allow.sysvipc = 0;


allow.raw_sockets = 0;

# This here allows privileged users to mount/unmount filesystems inside
# the jail.
#allow.mount;

# This allows the privileged users inside the jail to mount/unmount
# the devfs filesystem (use with care, should be avoided as much
# as possible)
#allow.mount.devfs;

# This ensures that each mount point below the jail "/" are visible.
# Values are 0 (no restrictions), 1 (only the current jail), and 
# 2 (parent jail or host system can manipulate anyhting)
enforce_statfs = 1;

# This line tells if the jail can spawn and how many of its own jailed
# services
children.max = 0;

# Here is a typical config, taking as default the above values.
# If any of the above lines are set inside, the values are overriden.

# The "section name" is also the jail's internal $name
apache24 {

# Id number of the jail, if you want it to be constant. Otherwise, you 
# can supress it so the host system defines a new one each time the jail
# is started
    jid = 1;

# Hostname of the jail, can be appended with the domain name 
    host.hostname = "apache24";

# Interfaces that this jail should use to network communications.
# Can be a hardware interface (like xl0, provided that the kernel drivers
# are loaded by the host system), a loopback clone (lo1), a vhost/vlan...
# Your choice, accordingly with your system's limitations
    interface = "lo1";

# IP address at which the jail should bind. in this case, we have cloned
# the loopback (lo0 -> lo1), and assigned a range of addresses to it, 
# from 192.168.2.1 to 192.168.2.2.10. It's usual to put up a subnet mask
# of 255.255.255.255 (ip/32), but this one specifically has only 24 bits
# set.
    ip4.addr = 192.168.2.2;
}

# Another example. I'm a dev, and have a local git repository to keep my
# works private. It's a good low-cost solution to small business, if you
# can't afford any commercial git services.
# It can be accessed both via HTTP(S) or SSH.

git {
    jid = 2;
    host.hostname = "git";
    interface = "lo1";
    ip4.addr = 192.168.2.3;
}
